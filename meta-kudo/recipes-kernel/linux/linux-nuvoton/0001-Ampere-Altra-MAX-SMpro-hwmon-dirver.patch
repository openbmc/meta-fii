From 5bb3ecfaaf507244c619d0e44fa27c6301b3914e Mon Sep 17 00:00:00 2001
From: Lancelot Kao <lancelot.kao@fii-usa.com>
Date: Mon, 19 Oct 2020 18:28:32 -0500
Subject: [PATCH] Ampere Altra (MAX) SMpro hwmon dirver

1. Add SMpro hwmon driver to monitor Ampere CPU/Memory/VR via
an i2c interface of the CPU's smpmpro management device.
2. Add DIMM G0 and DIMM G1 features to Smpmpro-hwmon driver

Signed-off-by: Lancelot Kao <lancelot.kao@fii-usa.com>
Signed-off-by: Xiaopeng XP Chen <xiao-peng.chen@fii-na.com>
---
 MAINTAINERS                 |   7 +
 drivers/hwmon/Kconfig       |  10 +
 drivers/hwmon/Makefile      |   1 +
 drivers/hwmon/smpro-hwmon.c | 776 ++++++++++++++++++++++++++++++++++++
 4 files changed, 794 insertions(+)
 create mode 100644 drivers/hwmon/smpro-hwmon.c

diff --git a/MAINTAINERS b/MAINTAINERS
index 5fecb388d073..2ec3fe5530f7 100644
--- a/MAINTAINERS
+++ b/MAINTAINERS
@@ -934,6 +934,13 @@ S:	Supported
 F:	arch/arm64/boot/dts/amd/amd-seattle-xgbe*.dtsi
 F:	drivers/net/ethernet/amd/xgbe/
 
+AMPERE COMPUTING SMpro DRIVER
+M:	Thu Ba Nguyen <tbnguyen@os.amperecomputing.com>
+S:	Supported
+F:	Documentation/devicetree/bindings/i2c/ampere,smpro.yaml
+F:	arch/arm/boot/dts/aspeed-bmc-ampere-mtjade.dts
+F:	drivers/hwmon/smpro-hwmon.c
+
 ANALOG DEVICES INC AD5686 DRIVER
 M:	Michael Hennerich <Michael.Hennerich@analog.com>
 L:	linux-pm@vger.kernel.org
diff --git a/drivers/hwmon/Kconfig b/drivers/hwmon/Kconfig
index 9aa89d7d4193..e146f61c755e 100644
--- a/drivers/hwmon/Kconfig
+++ b/drivers/hwmon/Kconfig
@@ -1777,6 +1777,16 @@ config SENSORS_INA3221
 	  This driver can also be built as a module. If so, the module
 	  will be called ina3221.
 
+config SENSORS_SMPRO
+	tristate "Ampere Computing SMpro hardware monitoring driver"
+	depends on I2C
+	help
+	  If you say yes here you get support for the thermal, voltage, current
+	  and power sensors of Ampere Computing's SoC with SMpro processor.
+
+	  This driver can also be built as a module. If so, the module
+	  will be called smpro.
+
 config SENSORS_TC74
 	tristate "Microchip TC74"
 	depends on I2C
diff --git a/drivers/hwmon/Makefile b/drivers/hwmon/Makefile
index ae41ee71a71b..987fb95880f5 100644
--- a/drivers/hwmon/Makefile
+++ b/drivers/hwmon/Makefile
@@ -166,6 +166,7 @@ obj-$(CONFIG_SENSORS_SHT3x)	+= sht3x.o
 obj-$(CONFIG_SENSORS_SHTC1)	+= shtc1.o
 obj-$(CONFIG_SENSORS_SIS5595)	+= sis5595.o
 obj-$(CONFIG_SENSORS_SMM665)	+= smm665.o
+obj-$(CONFIG_SENSORS_SMPRO)	+= smpro-hwmon.o
 obj-$(CONFIG_SENSORS_SMSC47B397)+= smsc47b397.o
 obj-$(CONFIG_SENSORS_SMSC47M1)	+= smsc47m1.o
 obj-$(CONFIG_SENSORS_SMSC47M192)+= smsc47m192.o
diff --git a/drivers/hwmon/smpro-hwmon.c b/drivers/hwmon/smpro-hwmon.c
new file mode 100644
index 000000000000..213e85936721
--- /dev/null
+++ b/drivers/hwmon/smpro-hwmon.c
@@ -0,0 +1,776 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Ampere Computing SoC's SMpro Hardware Monitoring Driver
+ *
+ * Copyright (c) 2019-2020, Ampere Computing LLC
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include <linux/err.h>
+#include <linux/hwmon.h>
+#include <linux/hwmon-sysfs.h>
+#include <linux/i2c.h>
+#include <linux/init.h>
+#include <linux/jiffies.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+
+/* Identification Registers */
+#define REG_SPEC_VERSION_REG            0x00
+#define VERSION_REG                     0x01
+#define MANUFACTURER_ID_REG             0x02
+#define DEVICE_ID_REG                   0x03
+#define BUILD_ID_LO_REG                 0x09
+#define BUILD_ID_HI_REG                 0x0A
+
+/* Capability Registers  */
+#define TEMP_SENSOR_SUPPORT_REG         0x05
+#define PWR_SENSOR_SUPPORT_REG          0x06
+#define VOLT_SENSOR_SUPPORT_REG         0x07
+#define OTHER_CAP_REG                   0x08
+#define CORE_CLUSTER_CNT_REG            0x0B
+#define SYS_CACHE_PCIE_CNT_REG          0x0C
+#define SOCKET_INFO_REG                 0x0D
+#define SOC_TDP_REG                     0x0E
+
+/* Logical Power Sensor Registers */
+#define SOC_TEMP_REG                    0x10
+#define SOC_VRD_TEMP_REG                0x11
+#define DIMM_VRD_TEMP_REG               0x12
+#define CORE_VRD_TEMP_REG               0x13
+#define CH0_DIMM_TEMP_REG               0x14
+#define CH1_DIMM_TEMP_REG               0x15
+#define CH2_DIMM_TEMP_REG               0x16
+#define CH3_DIMM_TEMP_REG               0x17
+#define CH4_DIMM_TEMP_REG               0x18
+#define CH5_DIMM_TEMP_REG               0x19
+#define CH6_DIMM_TEMP_REG               0x1A
+#define CH7_DIMM_TEMP_REG               0x1B
+#define RCA_VRD_TEMP_REG                0x1C
+
+#define CORE_VRD_PWR_REG                0x20
+#define SOC_VRD_PWR_REG                 0x21
+#define DIMM_VRD1_PWR_REG               0x22
+#define DIMM_VRD2_PWR_REG               0x23
+#define CORE_VRD_PWR_MW_REG             0x26
+#define SOC_VRD_PWR_MW_REG              0x27
+#define DIMM_VRD1_PWR_MW_REG            0x28
+#define DIMM_VRD2_PWR_MW_REG            0x29
+#define RCA_VRD_PWR_REG                 0x2A
+#define RCA_VRD_PWR_MW_REG              0x2B
+
+#define MEM_HOT_THRESHOLD_REG           0x32
+#define SOC_VR_HOT_THRESHOLD_REG        0x33
+#define CORE_VRD_VOLT_REG               0x34
+#define SOC_VRD_VOLT_REG                0x35
+#define DIMM_VRD1_VOLT_REG              0x36
+#define DIMM_VRD2_VOLT_REG              0x37
+#define RCA_VRD_VOLT_REG                0x38
+
+#define CORE_VRD_CURR_REG               0x39
+#define SOC_VRD_CURR_REG                0x3A
+#define DIMM_VRD1_CURR_REG              0x3B
+#define DIMM_VRD2_CURR_REG              0x3C
+#define RCA_VRD_CURR_REG		0x3D
+
+/* Add for DIMM group */
+#define DIMM_GROUP_DUMMY_REG		0xFF
+
+/* GPI Control set  Registers */
+#define GPI_CTRL0_REG                   0x50
+#define GPI_CTRL1_REG                   0x51
+#define GPI_CTRL2_REG                   0x52
+#define GPI_CTRL3_REG                   0x53
+#define GPI_CE_UE_MASK_REG              0x54
+
+/* GPI data set Registers */
+#define GPI_DATA_SET_REG                0x60
+#define GPI_DATA_SET0_REG               0x61
+#define GPI_DATA_SET1_REG               0x62
+#define GPI_DATA_SET2_REG               0x63
+#define GPI_DATA_SET3_REG               0x64
+
+/* GPI Status Registers */
+#define GPI_CLUSTER_ERR_SET0_REG        0x70
+#define GPI_VRD_FAULT_ERR_REG           0x78
+#define GPI_VRD_HOT_ERR_REG             0x79
+#define GPI_DIMM_HOT_ERR_REG            0x7A
+#define GPI_BOOT_ERR1_REG               0x7B
+#define GPI_BOOT_ERR2_REG               0x7C
+
+/* GPI RAS Error Registers */
+#define GPI_WDT_STS_REG                 0x7D
+#define GPI_RAS_ERR_REG                 0x7E
+
+/*  SPI NOR Authentication Failure */
+#define GPI_SPI_NOR_AUTHFAIL_REG        0x7F
+
+/* Core and L2C Error Registers */
+#define GPI_CORE_CE_ERR_CNT_REG         0x80
+#define GPI_CORE_CE_ERR_LEN_REG         0x81
+#define GPI_CORE_CE_ERR_DATA_REG        0x82
+#define GPI_CORE_UE_ERR_CNT_REG         0x83
+#define GPI_CORE_UE_ERR_LEN_REG         0x84
+#define GPI_CORE_UE_ERR_DATA_REG        0x85
+
+/* Memory Error Registers */
+#define GPI_MEM_CE_ERR_CNT_REG          0x90
+#define GPI_MEM_CE_ERR_LEN_REG          0x91
+#define GPI_MEM_CE_ERR_DATA_REG         0x92
+#define GPI_MEM_UE_ERR_CNT_REG          0x93
+#define GPI_MEM_UE_ERR_LEN_REG          0x94
+#define GPI_MEM_UE_ERR_DATA_REG         0x95
+
+/* RAS Error/Warning Registers */
+#define GPI_ERR_SMPRO_TYPE_REG          0xA0
+#define GPI_ERR_PMPRO_TYPE_REG          0xA1
+#define GPI_ERR_SMPRO_INFO_LO_REG       0xA2
+#define GPI_ERR_SMPRO_INFO_HI_REG       0xA3
+#define GPI_ERR_SMPRO_DATA_LO_REG       0xA4
+#define GPI_ERR_SMPRO_DATA_HI_REG       0xA5
+#define GPI_WARN_SMPRO_INFO_LO_REG      0xAA
+#define GPI_WARN_SMPRO_INFO_HI_REG      0xAB
+#define GPI_ERR_PMPRO_INFO_LO_REG       0xA6
+#define GPI_ERR_PMPRO_INFO_HI_REG       0xA7
+#define GPI_ERR_PMPRO_DATA_LO_REG       0xA8
+#define GPI_ERR_PMPRO_DATA_HI_REG       0xA9
+#define GPI_WARN_PMPRO_INFO_LO_REG      0xAC
+#define GPI_WARN_PMPRO_INFO_HI_REG      0xAD
+
+/* Boot Stage/Progress Registers */
+#define GPI_BOOT_STAGE_SELECT_REG       0xB0
+#define GPI_BOOT_STAGE_STATUS_LO_REG    0xB1
+#define GPI_BOOT_STAGE_CUR_STAGE_REG    0xB2
+
+/* PCIE Error Registers */
+#define GPI_PCIe_CE_ERR_CNT_REG         0xC0
+#define GPI_PCIe_CE_ERR_LEN_REG         0xC1
+#define GPI_PCIe_CE_ERR_DATA_REG        0xC2
+#define GPI_PCIe_UE_ERR_CNT_REG         0xC3
+#define GPI_PCIe_UE_ERR_LEN_REG         0xC4
+#define GPI_PCIe_UE_ERR_DATA_REG        0xC5
+
+/* Other Error Registers */
+#define GPI_OTHER_CE_ERR_CNT_REG        0xD0
+#define GPI_OTHER_CE_ERR_LEN_REG        0xD1
+#define GPI_OTHER_CE_ERR_DATA_REG       0xD2
+#define GPI_OTHER_UE_ERR_CNT_REG        0xD8
+#define GPI_OTHER_UE_ERR_LEN_REG        0xD9
+#define GPI_OTHER_UE_ERR_DATA_REG       0xDA
+
+/* ACPI State Registers */
+#define GPI_ACPI_SYSTEM_STATE_REG       0xE0
+#define GPI_ACPI_CPPC_CLUSTER_SEL_REG   0xE3
+#define GPI_ACPI_CPPC_CLUSTER_DATA_REG  0xE4
+#define GPI_ACPI_POWER_LIMIT_REG        0xE5
+
+struct smpro_data {
+	struct i2c_client *client;
+
+	u16 temp_support_regs;
+	u16 pwr_support_regs;
+	u16 volt_support_regs;
+	u16 other_caps;
+	u16 core_cluster_cnt_reg;
+	u16 sys_cache_pcie_cnt_reg;
+	u16 socket_info_reg;
+};
+
+static const u8 temp_regs[] = {
+	SOC_TEMP_REG,
+	SOC_VRD_TEMP_REG,
+	DIMM_VRD_TEMP_REG,
+	CORE_VRD_TEMP_REG,
+	/* reserved for DIMM G0 */
+	DIMM_GROUP_DUMMY_REG
+	CH0_DIMM_TEMP_REG,
+	CH1_DIMM_TEMP_REG,
+	CH2_DIMM_TEMP_REG,
+	CH3_DIMM_TEMP_REG,
+	/* reserved for DIMM G1 */
+	DIMM_GROUP_DUMMY_REG
+	CH4_DIMM_TEMP_REG,
+	CH5_DIMM_TEMP_REG,
+	CH6_DIMM_TEMP_REG,
+	CH7_DIMM_TEMP_REG,
+	MEM_HOT_THRESHOLD_REG,
+	SOC_VR_HOT_THRESHOLD_REG,
+	RCA_VRD_TEMP_REG,
+};
+
+static const u8 volt_regs[] = {
+	CORE_VRD_VOLT_REG,
+	SOC_VRD_VOLT_REG,
+	DIMM_VRD1_VOLT_REG,
+	DIMM_VRD2_VOLT_REG,
+	/* vrd1 has higher priority than vrd2 using vrd1 as output for ddr */
+	DIMM_VRD1_VOLT_REG,
+	RCA_VRD_VOLT_REG,
+};
+
+static const u8 curr_regs[] = {
+	CORE_VRD_CURR_REG,
+	SOC_VRD_CURR_REG,
+	DIMM_VRD1_CURR_REG,
+	DIMM_VRD2_CURR_REG,
+	RCA_VRD_CURR_REG,
+};
+
+enum pwr_regs {
+	PMD_VRD_PWR,
+	SOC_VRD_PWR,
+	DIMM_VRD1_PWR,
+	DIMM_VRD2_PWR,
+	CPU_VRD_PWR,
+	DIMM_VRD_PWR,
+	RCA_VRD_PWR,
+	SOC_TDP_PWR,
+};
+static const char * const label[] = {
+	"SoC",
+	"SoC VRD",
+	"DIMM VRD",
+	"DIMM VRD1",
+	"DIMM VRD2",
+	"PMD VRD",
+	"CH0 DIMM",
+	"CH1 DIMM",
+	"CH2 DIMM",
+	"CH3 DIMM",
+	"CH4 DIMM",
+	"CH5 DIMM",
+	"CH6 DIMM",
+	"CH7 DIMM",
+	"MEM HOT",
+	"SoC VR HOT",
+	"CPU VRD",
+	"RCA VRD",
+	"SOC TDP",
+	"DIMM G0",
+	"DIMM G1",
+};
+
+static void smpro_init_device(struct i2c_client *client,
+				struct smpro_data *data)
+{
+	s32 ret;
+
+	ret = i2c_smbus_read_word_swapped(client, TEMP_SENSOR_SUPPORT_REG);
+	if (ret < 0)
+		return;
+	data->temp_support_regs = ret;
+
+	ret = i2c_smbus_read_word_swapped(client, PWR_SENSOR_SUPPORT_REG);
+	if (ret < 0)
+		return;
+	data->pwr_support_regs = ret;
+
+	ret = i2c_smbus_read_word_swapped(client, VOLT_SENSOR_SUPPORT_REG);
+	if (ret < 0)
+		return;
+	data->volt_support_regs = ret;
+
+	ret = i2c_smbus_read_word_swapped(client, OTHER_CAP_REG);
+	if (ret < 0)
+		return;
+	data->other_caps = ret;
+
+	ret = i2c_smbus_read_word_swapped(client, CORE_CLUSTER_CNT_REG);
+	if (ret < 0)
+		return;
+	data->core_cluster_cnt_reg = ret;
+
+	ret = i2c_smbus_read_word_swapped(client, SYS_CACHE_PCIE_CNT_REG);
+	if (ret < 0)
+		return;
+	data->sys_cache_pcie_cnt_reg = ret;
+
+	ret = i2c_smbus_read_word_swapped(client, SOCKET_INFO_REG);
+	if (ret < 0)
+		return;
+	data->socket_info_reg = ret;
+}
+
+static int smpro_read_temp(struct device *dev, u32 attr, int channel,
+				long *val)
+{
+	struct smpro_data *data = dev_get_drvdata(dev);
+	struct i2c_client *client = data->client;
+	s32 highest_temp = -1;
+	s32 i = 0;
+	s32 ret = -1;
+
+	switch (attr) {
+	case hwmon_temp_input:
+		if (temp_regs[channel] == DIMM_GROUP_DUMMY_REG) {
+			for (i = 1; i <= 4; i++) {
+				ret = i2c_smbus_read_word_swapped(client, temp_regs[channel]);
+				if ((ret < 0xff) && (ret > highest_temp))
+					highest_temp = ret;
+			}
+			if (highest_temp <= 0)
+				return ERR_PTR(highest_temp);
+			*val = (highest_temp & 0x1ff) * 1000;
+		} else {
+			ret = i2c_smbus_read_word_swapped(client, temp_regs[channel]);
+			if (ret < 0)
+				return ret;
+			*val = (ret & 0x1ff) * 1000;
+		}
+	default:
+		return -EOPNOTSUPP;
+	}
+	
+	return 0;
+}
+
+static int smpro_read_in(struct device *dev, u32 attr, int channel,
+				long *val)
+{
+	struct smpro_data *data = dev_get_drvdata(dev);
+	struct i2c_client *client = data->client;
+	s32 ret;
+
+	switch (attr) {
+	case hwmon_in_input:
+		ret = i2c_smbus_read_word_swapped(client, volt_regs[channel]);
+		if (ret < 0)
+			return ret;
+		*val = ret & 0x7fff;
+		return 0;
+	default:
+		return -EOPNOTSUPP;
+	}
+}
+
+static int smpro_read_curr(struct device *dev, u32 attr, int channel,
+				long *val)
+{
+	struct smpro_data *data = dev_get_drvdata(dev);
+	struct i2c_client *client = data->client;
+	s32 ret;
+
+	switch (attr) {
+	case hwmon_curr_input:
+		ret = i2c_smbus_read_word_swapped(client, curr_regs[channel]);
+		if (ret < 0)
+			return ret;
+		*val = ret & 0x7fff;
+		return 0;
+	default:
+		return -EOPNOTSUPP;
+	}
+}
+
+static int smpro_read_power(struct device *dev, u32 attr, int channel,
+				long *val)
+{
+	struct smpro_data *data = dev_get_drvdata(dev);
+	struct i2c_client *client = data->client;
+	s32 ret = 0, ret_mw = 0;
+	s32 ret2 = 0, ret2_mw = 0;
+
+	switch (attr) {
+	case hwmon_power_input:
+		switch (channel) {
+		case PMD_VRD_PWR:
+			ret = i2c_smbus_read_word_swapped(client,
+				CORE_VRD_PWR_REG);
+			ret_mw = i2c_smbus_read_word_swapped(client,
+				CORE_VRD_PWR_MW_REG);
+			break;
+		case SOC_VRD_PWR:
+			ret = i2c_smbus_read_word_swapped(client,
+				SOC_VRD_PWR_REG);
+			ret_mw = i2c_smbus_read_word_swapped(client,
+				SOC_VRD_PWR_MW_REG);
+			break;
+		case DIMM_VRD1_PWR:
+			ret = i2c_smbus_read_word_swapped(client,
+			DIMM_VRD1_PWR_REG);
+			ret_mw = i2c_smbus_read_word_swapped(client,
+				DIMM_VRD1_PWR_MW_REG);
+			break;
+		case DIMM_VRD2_PWR:
+			ret = i2c_smbus_read_word_swapped(client,
+				DIMM_VRD2_PWR_REG);
+			ret_mw = i2c_smbus_read_word_swapped(client,
+				DIMM_VRD2_PWR_MW_REG);
+			break;
+		case RCA_VRD_PWR:
+			ret = i2c_smbus_read_word_swapped(client,
+				RCA_VRD_PWR_REG);
+			ret_mw = i2c_smbus_read_word_swapped(client,
+				RCA_VRD_PWR_MW_REG);
+			break;
+		case SOC_TDP_PWR:
+			ret = i2c_smbus_read_word_swapped(client,
+				SOC_TDP_REG);
+			break;
+		case CPU_VRD_PWR:
+			ret = i2c_smbus_read_word_swapped(client,
+				CORE_VRD_PWR_REG);
+			ret_mw = i2c_smbus_read_word_swapped(client,
+				CORE_VRD_PWR_MW_REG);
+			ret2 = i2c_smbus_read_word_swapped(client,
+				SOC_VRD_PWR_REG);
+			ret2_mw = i2c_smbus_read_word_swapped(client,
+				SOC_VRD_PWR_MW_REG);
+			break;
+		case DIMM_VRD_PWR:
+			ret = i2c_smbus_read_word_swapped(client,
+				DIMM_VRD1_PWR_REG);
+			ret_mw = i2c_smbus_read_word_swapped(client,
+				DIMM_VRD1_PWR_MW_REG);
+			ret2 = i2c_smbus_read_word_swapped(client,
+				DIMM_VRD2_PWR_REG);
+			ret2_mw = i2c_smbus_read_word_swapped(client,
+				DIMM_VRD2_PWR_MW_REG);
+			break;
+		default:
+			return -EOPNOTSUPP;
+		}
+
+		if (ret_mw == 0xffff)
+			ret_mw = 0;
+		if (ret2_mw == 0xffff)
+			ret2_mw = 0;
+		if (ret < 0 || ret_mw < 0 || ret2 < 0 || ret2_mw < 0)
+			return ret < 0 ? ret : ret_mw < 0 ?
+				ret_mw : ret2 < 0 ? ret2 : ret2_mw;
+
+		*val = (ret + ret2)*1000000 + (ret_mw + ret2_mw)*1000;
+		return 0;
+	default:
+		return -EOPNOTSUPP;
+	}
+}
+
+static int smpro_read_gpi(struct device *dev,
+				struct device_attribute *da, char *buf)
+{
+	struct sensor_device_attribute *attr = to_sensor_dev_attr(da);
+	struct smpro_data *data = dev_get_drvdata(dev);
+	struct i2c_client *client = data->client;
+	s32 ret;
+
+	ret = i2c_smbus_read_word_swapped(client, attr->index);
+
+	if (ret < 0)
+		return ret;
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", ret);
+}
+
+static int smpro_read(struct device *dev, enum hwmon_sensor_types type,
+				u32 attr, int channel, long *val)
+{
+	switch (type) {
+	case hwmon_temp:
+		return smpro_read_temp(dev, attr, channel, val);
+	case hwmon_in:
+		return smpro_read_in(dev, attr, channel, val);
+	case hwmon_power:
+		return smpro_read_power(dev, attr, channel, val);
+	case hwmon_curr:
+		return smpro_read_curr(dev, attr, channel, val);
+	default:
+		return -EOPNOTSUPP;
+	}
+}
+
+static int smpro_write_gpi(struct device *dev,
+				struct device_attribute *da,
+				const char *buf, size_t count)
+{
+	struct sensor_device_attribute *attr = to_sensor_dev_attr(da);
+	struct smpro_data *data = dev_get_drvdata(dev);
+	struct i2c_client *client = data->client;
+	unsigned long val;
+	s32 ret;
+
+	ret = kstrtoul(buf, 16, &val);
+
+	ret = i2c_smbus_write_word_swapped(client, attr->index, val);
+	if (ret < 0)
+		return -EPROTO;
+
+	return count;
+}
+
+static int smpro_write(struct device *dev, enum hwmon_sensor_types type,
+				u32 attr, int channel, long val)
+{
+	return -EOPNOTSUPP;
+}
+
+static umode_t smpro_is_visible(const void *data,
+				enum hwmon_sensor_types type,
+				u32 attr, int channel)
+{
+	return 0444;
+}
+
+static ssize_t show_label(struct device *dev, struct device_attribute *devattr,
+				char *buf)
+{
+	int index = to_sensor_dev_attr(devattr)->index;
+
+	return sprintf(buf, "%s\n", label[index]);
+}
+
+static const u32 smpro_temp_config[] = {
+	HWMON_T_INPUT,
+	HWMON_T_INPUT,
+	HWMON_T_INPUT,
+	HWMON_T_INPUT,
+	HWMON_T_INPUT,
+	HWMON_T_INPUT,
+	HWMON_T_INPUT,
+	HWMON_T_INPUT,
+	HWMON_T_INPUT,
+	HWMON_T_INPUT,
+	HWMON_T_INPUT,
+	HWMON_T_INPUT,
+	HWMON_T_INPUT,
+	HWMON_T_INPUT,
+	HWMON_T_INPUT,
+	0
+};
+
+static const struct hwmon_channel_info smpro_temp = {
+	.type = hwmon_temp,
+	.config = smpro_temp_config,
+};
+
+static const u32 smpro_in_config[] = {
+	HWMON_I_INPUT,
+	HWMON_I_INPUT,
+	HWMON_I_INPUT,
+	HWMON_I_INPUT,
+	HWMON_I_INPUT,
+	HWMON_I_INPUT,
+	0
+};
+
+static const struct hwmon_channel_info smpro_in = {
+	.type = hwmon_in,
+	.config = smpro_in_config,
+};
+
+static const u32 smpro_curr_config[] = {
+	HWMON_C_INPUT,
+	HWMON_C_INPUT,
+	HWMON_C_INPUT,
+	HWMON_C_INPUT,
+	HWMON_C_INPUT,
+	0
+};
+
+static const struct hwmon_channel_info smpro_curr = {
+	.type = hwmon_curr,
+	.config = smpro_curr_config,
+};
+
+static const u32 smpro_power_config[] = {
+	HWMON_P_INPUT,
+	HWMON_P_INPUT,
+	HWMON_P_INPUT,
+	HWMON_P_INPUT,
+	HWMON_P_INPUT,
+	HWMON_P_INPUT,
+	HWMON_P_INPUT,
+	HWMON_P_INPUT,
+	0
+};
+
+static const struct hwmon_channel_info smpro_power = {
+	.type = hwmon_power,
+	.config = smpro_power_config,
+};
+
+static const struct hwmon_channel_info *smpro_info[] = {
+	&smpro_temp,
+	&smpro_in,
+	&smpro_power,
+	&smpro_curr,
+	NULL
+};
+
+static const struct hwmon_ops smpro_hwmon_ops = {
+	.is_visible = smpro_is_visible,
+	.read = smpro_read,
+	.write = smpro_write,
+};
+
+static const struct hwmon_chip_info smpro_chip_info = {
+	.ops = &smpro_hwmon_ops,
+	.info = smpro_info,
+};
+
+static SENSOR_DEVICE_ATTR(temp1_label, 0444, show_label, NULL, 0);
+static SENSOR_DEVICE_ATTR(temp2_label, 0444, show_label, NULL, 1);
+static SENSOR_DEVICE_ATTR(temp3_label, 0444, show_label, NULL, 2);
+static SENSOR_DEVICE_ATTR(temp4_label, 0444, show_label, NULL, 5);
+static SENSOR_DEVICE_ATTR(temp5_label, 0444, show_label, NULL, 19);
+static SENSOR_DEVICE_ATTR(temp6_label, 0444, show_label, NULL, 6);
+static SENSOR_DEVICE_ATTR(temp7_label, 0444, show_label, NULL, 7);
+static SENSOR_DEVICE_ATTR(temp8_label, 0444, show_label, NULL, 8);
+static SENSOR_DEVICE_ATTR(temp9_label, 0444, show_label, NULL, 9);
+static SENSOR_DEVICE_ATTR(temp10_label, 0444, show_label, NULL, 20);
+static SENSOR_DEVICE_ATTR(temp11_label, 0444, show_label, NULL, 10);
+static SENSOR_DEVICE_ATTR(temp12_label, 0444, show_label, NULL, 11);
+static SENSOR_DEVICE_ATTR(temp13_label, 0444, show_label, NULL, 12);
+static SENSOR_DEVICE_ATTR(temp14_label, 0444, show_label, NULL, 13);
+static SENSOR_DEVICE_ATTR(temp15_label, 0444, show_label, NULL, 14);
+static SENSOR_DEVICE_ATTR(temp16_label, 0444, show_label, NULL, 15);
+static SENSOR_DEVICE_ATTR(temp17_label, 0444, show_label, NULL, 17);
+
+static SENSOR_DEVICE_ATTR(in0_label, 0444, show_label, NULL, 5);
+static SENSOR_DEVICE_ATTR(in1_label, 0444, show_label, NULL, 1);
+static SENSOR_DEVICE_ATTR(in2_label, 0444, show_label, NULL, 3);
+static SENSOR_DEVICE_ATTR(in3_label, 0444, show_label, NULL, 4);
+static SENSOR_DEVICE_ATTR(in4_label, 0444, show_label, NULL, 2);
+static SENSOR_DEVICE_ATTR(in5_label, 0444, show_label, NULL, 17);
+
+static SENSOR_DEVICE_ATTR(power1_label, 0444, show_label, NULL, 5);
+static SENSOR_DEVICE_ATTR(power2_label, 0444, show_label, NULL, 1);
+static SENSOR_DEVICE_ATTR(power3_label, 0444, show_label, NULL, 3);
+static SENSOR_DEVICE_ATTR(power4_label, 0444, show_label, NULL, 4);
+static SENSOR_DEVICE_ATTR(power5_label, 0444, show_label, NULL, 16);
+static SENSOR_DEVICE_ATTR(power6_label, 0444, show_label, NULL, 2);
+static SENSOR_DEVICE_ATTR(power7_label, 0444, show_label, NULL, 17);
+static SENSOR_DEVICE_ATTR(power8_label, 0444, show_label, NULL, 18);
+
+static SENSOR_DEVICE_ATTR(gpi_boot_stage_select, 0644,
+	smpro_read_gpi, smpro_write_gpi, GPI_BOOT_STAGE_SELECT_REG);
+static SENSOR_DEVICE_ATTR(gpi_boot_stage_status_lo, 0444,
+	smpro_read_gpi, NULL, GPI_BOOT_STAGE_STATUS_LO_REG);
+static SENSOR_DEVICE_ATTR(gpi_boot_stage_cur_stage, 0444,
+	smpro_read_gpi, NULL, GPI_BOOT_STAGE_CUR_STAGE_REG);
+static SENSOR_DEVICE_ATTR(acpi_power_limit, 0644,
+	smpro_read_gpi, smpro_write_gpi, GPI_ACPI_POWER_LIMIT_REG);
+
+static SENSOR_DEVICE_ATTR(curr1_label, 0444, show_label, NULL, 5);
+static SENSOR_DEVICE_ATTR(curr2_label, 0444, show_label, NULL, 1);
+static SENSOR_DEVICE_ATTR(curr3_label, 0444, show_label, NULL, 3);
+static SENSOR_DEVICE_ATTR(curr4_label, 0444, show_label, NULL, 4);
+static SENSOR_DEVICE_ATTR(curr5_label, 0444, show_label, NULL, 17);
+
+static struct attribute *smpro_attrs[] = {
+	&sensor_dev_attr_gpi_boot_stage_select.dev_attr.attr,
+	&sensor_dev_attr_gpi_boot_stage_status_lo.dev_attr.attr,
+	&sensor_dev_attr_gpi_boot_stage_cur_stage.dev_attr.attr,
+	&sensor_dev_attr_acpi_power_limit.dev_attr.attr,
+
+	&sensor_dev_attr_temp1_label.dev_attr.attr,
+	&sensor_dev_attr_temp2_label.dev_attr.attr,
+	&sensor_dev_attr_temp3_label.dev_attr.attr,
+	&sensor_dev_attr_temp4_label.dev_attr.attr,
+	&sensor_dev_attr_temp5_label.dev_attr.attr,
+	&sensor_dev_attr_temp6_label.dev_attr.attr,
+	&sensor_dev_attr_temp7_label.dev_attr.attr,
+	&sensor_dev_attr_temp8_label.dev_attr.attr,
+	&sensor_dev_attr_temp9_label.dev_attr.attr,
+	&sensor_dev_attr_temp10_label.dev_attr.attr,
+	&sensor_dev_attr_temp11_label.dev_attr.attr,
+	&sensor_dev_attr_temp12_label.dev_attr.attr,
+	&sensor_dev_attr_temp13_label.dev_attr.attr,
+	&sensor_dev_attr_temp14_label.dev_attr.attr,
+	&sensor_dev_attr_temp15_label.dev_attr.attr,
+
+	&sensor_dev_attr_in0_label.dev_attr.attr,
+	&sensor_dev_attr_in1_label.dev_attr.attr,
+	&sensor_dev_attr_in2_label.dev_attr.attr,
+	&sensor_dev_attr_in3_label.dev_attr.attr,
+	&sensor_dev_attr_in4_label.dev_attr.attr,
+	&sensor_dev_attr_in5_label.dev_attr.attr,
+
+	&sensor_dev_attr_curr1_label.dev_attr.attr,
+	&sensor_dev_attr_curr2_label.dev_attr.attr,
+	&sensor_dev_attr_curr3_label.dev_attr.attr,
+	&sensor_dev_attr_curr4_label.dev_attr.attr,
+	&sensor_dev_attr_curr5_label.dev_attr.attr,
+
+	&sensor_dev_attr_power1_label.dev_attr.attr,
+	&sensor_dev_attr_power2_label.dev_attr.attr,
+	&sensor_dev_attr_power3_label.dev_attr.attr,
+	&sensor_dev_attr_power4_label.dev_attr.attr,
+	&sensor_dev_attr_power5_label.dev_attr.attr,
+	&sensor_dev_attr_power6_label.dev_attr.attr,
+	&sensor_dev_attr_power7_label.dev_attr.attr,
+	&sensor_dev_attr_power8_label.dev_attr.attr,
+
+	NULL
+};
+ATTRIBUTE_GROUPS(smpro);
+
+static int smpro_i2c_probe(struct i2c_client *client,
+				const struct i2c_device_id *id)
+{
+	struct i2c_adapter *adapter = client->adapter;
+	struct device *dev = &client->dev;
+	struct smpro_data *data;
+	struct device *hwmon_dev;
+
+	if (!i2c_check_functionality(adapter,
+			I2C_FUNC_SMBUS_BYTE_DATA | I2C_FUNC_SMBUS_WORD_DATA))
+		return -ENODEV;
+
+	data = devm_kzalloc(dev, sizeof(struct smpro_data), GFP_KERNEL);
+	if (!data)
+		return -ENOMEM;
+
+	data->client = client;
+
+	/* Initialize the SMpro chip */
+	smpro_init_device(client, data);
+
+	hwmon_dev = devm_hwmon_device_register_with_info(dev, client->name,
+							data,
+							&smpro_chip_info,
+							smpro_groups);
+	return PTR_ERR_OR_ZERO(hwmon_dev);
+}
+
+static const struct of_device_id smpro_match[] = {
+	{ .compatible = "ampere,smpro" },
+	{}
+};
+
+static const struct i2c_device_id smpro_id[] = {
+	{ "smpro", 0 },
+	{ }
+};
+MODULE_DEVICE_TABLE(i2c, smpro_id);
+
+static struct i2c_driver smpro_driver = {
+	.class		= I2C_CLASS_HWMON,
+	.probe		= smpro_i2c_probe,
+	.driver = {
+		.name	= "smpro",
+		.of_match_table = smpro_match,
+	},
+	.id_table	= smpro_id,
+};
+
+module_i2c_driver(smpro_driver);
+
+MODULE_AUTHOR("Thinh Pham <thinh.pham@amperecomputing.com>");
+MODULE_AUTHOR("Hoang Nguyen <hnguyen@amperecomputing.com>");
+MODULE_AUTHOR("Thu Nguyen <tbnguyen@amperecomputing.com>");
+MODULE_DESCRIPTION("Ampere SMpro driver");
+MODULE_LICENSE("GPL");
+
-- 
2.17.1

